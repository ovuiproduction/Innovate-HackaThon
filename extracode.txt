# format data (gemini response)
# def get_data(Prompt):
#     response = gemini_response(Prompt)
#     try:
#         json_string = response.text.strip()
#         json_string = re.sub(r"```(?:json)?\s*", "", json_string)
#         json_string = re.sub(r"```", "", json_string)
#         json_data = json.loads(json_string)
#         return json_data
    
#     except json.JSONDecodeError as e:
#         print("Error parsing JSON:", e)
#         return None
#     except Exception as e:
#         print("Error:", e)
#         return None


# for yield temperature
def getMahaTemp(year,district):
    prompt = f"""Analyze the previous temperature conditions and pattern in maharashtra and predict the     
                temperature for year : {year} and district {district} in maharashtra.  
                Output the temperature in Celsius.
                you need to predict the temperature according to year, and district in maharashtra.
                only temperature value , No any explanation or other text.
                output in json format.
                ### ouput format :  25.5 
                """
    temperature = get_data(prompt)
    return temperature


# crop selection guide
def getCropSelectionConclusion(IntelCropData,Nitrogen,Potassium,Phosphorus,soilColor,pH):
    Prompt = f"""
        You are an expert in crop selection. I will provide you with data that includes:
        The expected total price and yield for various crops.
        Meteorological and soil data relevant to crop growth.
        Based on this data, suggest the most profitable crop that is also suitable for the given soil conditions.
        In output only suggested crop and reasoning no any desclaimers.
        Output Format: JSON 
        suggested_crop
        reasoning
        
        Price and yield data : {IntelCropData},
        Nitrogen : {Nitrogen},
        Potassium : {Potassium},
        Phosphorus : {Phosphorus},
        soilColor : {soilColor},
        pH : {pH}
    """
    data = get_data(Prompt)
    return data


# Gemini in use
def geminiInUse(cropname):
    # Market Info
    Prompt = f"""Provide information about the 5 best markets for selling {cropname} in Maharashtra in JSON format. The JSON should be an array of objects. Each object should have the following keys: 'market_name', 'strengths' (an array of strings), and 'best_for'.do not write the disclaimer only json data of markets"""
    market_data = get_data(Prompt)
    
    # Goverment Schemes
    Prompt = f"""Provide information about 3 Indian government schemes related to {cropname} farming in JSON format. The JSON should be an array of objects. Each object should have the following keys: 'scheme_name', 'purpose', and 'benefits' (which should be an array of strings). do not write the disclaimer or extra information only json data of goverment scheme in specified format"""
    goverment_data = get_data(Prompt)
    
    return market_data,goverment_data


# rainfall and temperature prediction
def rainfallAndTempreturePrediction(subdivision,year):
    months = random.sample(range(1, 13), 6)
    aggregated_rainfall = 0
    aggregated_temperature = 0
        
    for month in months:
        # rainfall predictions
        column_names_rainfall_model = ['SUBDIVISION','YEAR','MONTH']
        features = [[subdivision,year,month]]
        features_df = pd.DataFrame(features, columns=column_names_rainfall_model)
        transformed_features = rainfall_preprocessor.transform(features_df)
        prediction = rainfall_model.predict(transformed_features).reshape(1,-1)
        rainfall = round(prediction[0][0] , 2)
        aggregated_rainfall+=rainfall
    
        # tempreture prediction
        column_names_temperature_model = ['YEAR','MONTH']
        features = [[year,month]]
        features_df = pd.DataFrame(features, columns=column_names_temperature_model)
        transformed_features = temperature_preprocessor.transform(features_df)
        prediction = temperature_model.predict(transformed_features).reshape(1,-1)
        temperature = round(prediction[0][0] , 2)
        aggregated_temperature+=temperature
    
    aggregated_rainfall = round(aggregated_rainfall/6,2)
    aggregated_temperature = round(aggregated_temperature/6,2)
   
    return aggregated_rainfall,aggregated_temperature


# yield prediction function
def yieldPrediction(Year, District, Commodity, Area, Rainfall, Temperature, Soil_color, Fertilizer, Nitrogen, Phosphorus, Potassium, pH):
    column_names = ['Year', 'District', 'Commodity', 'Area', 'Rainfall', 'Temperature','Soil_color','Fertilizer', 'Nitrogen', 'Phosphorus', 'Potassium', 'pH']
    features = [[Year, District, Commodity, Area, Rainfall, Temperature, Soil_color, Fertilizer, Nitrogen, Phosphorus, Potassium, pH]]
    features_df = pd.DataFrame(features, columns=column_names)
    transformed_features = yield_preprocessor.transform(features_df)
    prediction = yield_model.predict(transformed_features).reshape(1,-1)
    predicted_yield = round(prediction[0][0] , 2)
    return predicted_yield


def getIntelCropData(Commoditys, Year, Month, District, Area, Nitrogen, Potassium, Phosphorus, Fertilizer, soilColor, pH):
    wpi_Rainfall = getIndiaRainfallMonthly(Year, Month)
    Rainfall = getMahaAnnualRainfall(Year, District)
    Temperature = getMahaTemp(Year, District)
    IntelCroprecData = {}

    for Commodity in Commoditys:
        min_wpi_price, max_wpi_price, predicted_price = wpiPricePrediction(Commodity, Month, Year, wpi_Rainfall)
        predicted_yield = yieldPrediction(Year, District, Commodity, Area, Rainfall, Temperature, soilColor, Fertilizer, Nitrogen, Phosphorus, Potassium, pH)
        totalPrice = round((predicted_yield*Area*predicted_price), 2)
        
        # Corrected dictionary assignment
        IntelCroprecData[Commodity] = {
            "predicted_price": predicted_price,
            "predicted_yield": predicted_yield,
            "area":Area,
            "totalPrice": totalPrice
        }
    return IntelCroprecData

@app.route('/intel-trasport-analysis',methods=['GET'])
def getTrasportAnalysis():
    if request.method == 'GET':
        # data = request.get_json()
        # srcSubdistrict  = data.get('srcSubdistrict')
        # srcDistrict  = data.get('srcDistrict')
        # desDistrict  = data.get('desDistrict')
        # milage  = data.get('milage')
        srcSubdistrict  = "Madha"
        srcDistrict  = "Solapur"
        desDistrict  = "Pune"
        milage  = 25
        transportation_data_all,transportation_data = getTransportationData(srcSubdistrict,srcDistrict,desDistrict,milage)
        return jsonify({'data':transportation_data_all})


@app.route('/intel-crop-recommendation',methods=['POST'])
def IntelCropRec():
    if request.method == 'POST':
        data = request.get_json()
        Commoditys = data.get('crops')
        Year = data.get('year')
        Month = data.get('month')
        District = data.get('district')
        Area = data.get('area')
        Fertilizer = data.get('fertilizer')
        Nitrogen = data.get('nitrogen')
        Phosphorus = data.get('phosphorus')
        Potassium = data.get('potassium')
        pH = data.get('pH')
        soilColor  = data.get("soilColor")
        try:
            Year = int(Year)
            Month = int(Month)
            Area = float(Area)
            Nitrogen = float(Nitrogen)
            Phosphorus = float(Phosphorus)
            Potassium = float(Potassium)
            pH = float(pH)
        except ValueError:
            print("Error data conversion")
            return jsonify({"error": "Invalid input format for numbers"}), 400

        IntelCropData = getIntelCropData(Commoditys,Year,Month,District,Area,Nitrogen,Potassium,Phosphorus,Fertilizer,soilColor,pH)
        conclusion = getCropSelectionConclusion(IntelCropData,Nitrogen,Potassium,Phosphorus,soilColor,pH)
        return jsonify({'data':IntelCropData,'conclusion':conclusion})


# result route
@app.route('/intel-yield',methods=['POST'])
def IntelYield():
    if request.method == 'POST':
        data = request.get_json()
        Commodity = data.get('commodity')
        Year = data.get('year')
        District = data.get('district')
        Area = data.get('area')
        Soil_color = data.get('soilColor')
        Fertilizer = data.get('fertilizer')
        Nitrogen = data.get('nitrogen')
        Phosphorus = data.get('phosphorus')
        Potassium = data.get('potassium')
        pH = data.get('pH')

        if not all([Commodity, Year, District, Area, Soil_color, Fertilizer, Nitrogen, Phosphorus, Potassium, pH]):
            return jsonify({"error": "All fields are required"}), 400

        try:
            Year = int(Year)
            # Month = int(Month)
            Area = float(Area)
            Nitrogen = float(Nitrogen)
            Phosphorus = float(Phosphorus)
            Potassium = float(Potassium)
            pH = float(pH)
        except ValueError:
            print("Error data conversion")
            return jsonify({"error": "Invalid input format for numbers"}), 400

      
        # current year rainfall and temperature prediction
        Rainfall = getMahaAnnualRainfall(Year,District)
        Temperature = getMahaTemp(Year,District)
        # current year crop yield
        yield_prediction = yieldPrediction(Year, District, Commodity, Area, Rainfall, Temperature, Soil_color, Fertilizer, Nitrogen, Phosphorus, Potassium, pH)
        # current year crop yield in tonnes
        yield_prediction_tonnes = round(yield_prediction/10,2)
        
        # Gemini In Use
        market_data,goverment_data = geminiInUse(Commodity)

        return jsonify({
            'yieldPrediction': yield_prediction,
            'yieldPredictionTonnes': yield_prediction_tonnes,
            'commodity': Commodity,
            'state': "Maharashtra",
            'district': District,
            'area': Area,
            'rainfall': Rainfall,
            'temperature': Temperature,
            'year': Year,
            'marketData': market_data,
            'governmentData': goverment_data
        })